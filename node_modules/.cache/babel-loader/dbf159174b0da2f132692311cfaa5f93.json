{"ast":null,"code":"import _toConsumableArray from\"C:/Users/Hp/Downloads/job-listings-main/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"C:/Users/Hp/Downloads/job-listings-main/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from\"react\";import Jobs from\"./Jobs\";import Filter from\"./Filter\";// data is imported from this static file for this project\nimport data from\"./data.json\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){// 2 useState hooks are used, one to display the jobs, \n// the other is to filter the first hook with results the user has clicked\nvar _useState=useState(data),_useState2=_slicedToArray(_useState,2),jobs=_useState2[0],setJobs=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),filter=_useState4[0],setFilter=_useState4[1];// when the user clicks one of the tags (role, level,\n// languages, tools) it's added to the filter list if not already in\nvar addItem=function addItem(item){if(filter.includes(item)){return;}else{setFilter([].concat(_toConsumableArray(filter),[item]));}};// each time the filter hook changes this hook filters \n// the data and updates the jobs hook accordingly\nuseEffect(function(){var newJobList=[];data.forEach(function(job){var string=JSON.stringify(job);var count=0;filter.forEach(function(item){if(string.includes(item)){count++;}});if(count===filter.length){newJobList.push(job);}});setJobs(newJobList);},[filter]);// handles the clear button in filter component\nvar clearFilter=function clearFilter(){setFilter([]);setJobs(data);};// handles the close buttons on the filter items\nvar removeItem=function removeItem(removed){if(filter.length>1){setFilter(filter.filter(function(item){return item!==removed;}));}else{clearFilter();}};// components returned here, filter only displays if it has values\nreturn/*#__PURE__*/_jsxs(\"main\",{children:[filter.length>0&&/*#__PURE__*/_jsx(Filter,{filter:filter,clearFilter:clearFilter,removeItem:removeItem}),/*#__PURE__*/_jsx(Jobs,{jobs:jobs,addItem:addItem}),/*#__PURE__*/_jsxs(\"div\",{class:\"attribution\",children:[\"Challenge by \",/*#__PURE__*/_jsx(\"a\",{href:\"https://www.frontendmentor.io/challenges/job-listings-with-filtering-ivstIPCt\",target:\"_blank\",children:\"Frontend Mentor\"}),\". Coded by \",/*#__PURE__*/_jsx(\"a\",{href:\"https://github.com/michagodfrey\",children:\"Michael Godfrey\"}),\".\"]})]});}export default App;","map":{"version":3,"sources":["C:/Users/Hp/Downloads/job-listings-main/src/App.js"],"names":["React","useEffect","useState","Jobs","Filter","data","App","jobs","setJobs","filter","setFilter","addItem","item","includes","newJobList","forEach","job","string","JSON","stringify","count","length","push","clearFilter","removeItem","removed"],"mappings":"kQAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,CACA,MAAOC,CAAAA,MAAP,KAAmB,UAAnB,CACA;AACA,MAAOC,CAAAA,IAAP,KAAiB,aAAjB,C,wFAEA,QAASC,CAAAA,GAAT,EAAe,CACb;AACA;AACA,cAAwBJ,QAAQ,CAACG,IAAD,CAAhC,wCAAOE,IAAP,eAAaC,OAAb,eACA,eAA4BN,QAAQ,CAAC,EAAD,CAApC,yCAAOO,MAAP,eAAeC,SAAf,eAEA;AACA;AACA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,IAAD,CAAU,CACxB,GAAIH,MAAM,CAACI,QAAP,CAAgBD,IAAhB,CAAJ,CAA2B,CACzB,OACD,CAFD,IAEO,CACLF,SAAS,8BAAKD,MAAL,GAAaG,IAAb,GAAT,CACD,CACF,CAND,CAQA;AACA;AACAX,SAAS,CAAC,UAAM,CACd,GAAIa,CAAAA,UAAU,CAAG,EAAjB,CACAT,IAAI,CAACU,OAAL,CAAa,SAACC,GAAD,CAAS,CACpB,GAAIC,CAAAA,MAAM,CAAGC,IAAI,CAACC,SAAL,CAAeH,GAAf,CAAb,CACA,GAAII,CAAAA,KAAK,CAAG,CAAZ,CACAX,MAAM,CAACM,OAAP,CAAe,SAACH,IAAD,CAAU,CACvB,GAAIK,MAAM,CAACJ,QAAP,CAAgBD,IAAhB,CAAJ,CAA2B,CACzBQ,KAAK,GACN,CACF,CAJD,EAKA,GAAIA,KAAK,GAAKX,MAAM,CAACY,MAArB,CAA6B,CAC3BP,UAAU,CAACQ,IAAX,CAAgBN,GAAhB,EACD,CACF,CAXD,EAYAR,OAAO,CAACM,UAAD,CAAP,CACD,CAfQ,CAeN,CAACL,MAAD,CAfM,CAAT,CAiBA;AACA,GAAMc,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CACxBb,SAAS,CAAC,EAAD,CAAT,CACAF,OAAO,CAACH,IAAD,CAAP,CACD,CAHD,CAKA;AACA,GAAMmB,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,OAAD,CAAa,CAC9B,GAAIhB,MAAM,CAACY,MAAP,CAAgB,CAApB,CAAuB,CACrBX,SAAS,CAACD,MAAM,CAACA,MAAP,CAAc,SAACG,IAAD,QAAUA,CAAAA,IAAI,GAAKa,OAAnB,EAAd,CAAD,CAAT,CACD,CAFD,IAEO,CACLF,WAAW,GACZ,CACF,CAND,CAQA;AACA,mBACE,wBACGd,MAAM,CAACY,MAAP,CAAgB,CAAhB,eACC,KAAC,MAAD,EACE,MAAM,CAAEZ,MADV,CAEE,WAAW,CAAEc,WAFf,CAGE,UAAU,CAAEC,UAHd,EAFJ,cAQE,KAAC,IAAD,EAAM,IAAI,CAAEjB,IAAZ,CAAkB,OAAO,CAAEI,OAA3B,EARF,cASG,aAAK,KAAK,CAAC,aAAX,wCACe,UAAG,IAAI,CAAC,+EAAR,CAAwF,MAAM,CAAC,QAA/F,6BADf,4BAEW,UAAG,IAAI,CAAC,iCAAR,6BAFX,OATH,GADF,CAgBD,CAED,cAAeL,CAAAA,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Jobs from \"./Jobs\";\nimport Filter from \"./Filter\";\n// data is imported from this static file for this project\nimport data from \"./data.json\";\n\nfunction App() {\n  // 2 useState hooks are used, one to display the jobs, \n  // the other is to filter the first hook with results the user has clicked\n  const [jobs, setJobs] = useState(data);\n  const [filter, setFilter] = useState([]);\n\n  // when the user clicks one of the tags (role, level,\n  // languages, tools) it's added to the filter list if not already in\n  const addItem = (item) => {\n    if (filter.includes(item)) {\n      return;\n    } else {\n      setFilter([...filter, item]);\n    }\n  };\n\n  // each time the filter hook changes this hook filters \n  // the data and updates the jobs hook accordingly\n  useEffect(() => {\n    let newJobList = [];\n    data.forEach((job) => {\n      let string = JSON.stringify(job);\n      let count = 0;\n      filter.forEach((item) => {\n        if (string.includes(item)) {\n          count++;\n        }\n      });\n      if (count === filter.length) {\n        newJobList.push(job);\n      }\n    });\n    setJobs(newJobList);\n  }, [filter]);\n\n  // handles the clear button in filter component\n  const clearFilter = () => {\n    setFilter([]);\n    setJobs(data);\n  };\n\n  // handles the close buttons on the filter items\n  const removeItem = (removed) => {\n    if (filter.length > 1) {\n      setFilter(filter.filter((item) => item !== removed));\n    } else {\n      clearFilter();\n    }\n  };\n\n  // components returned here, filter only displays if it has values\n  return (\n    <main>\n      {filter.length > 0 && (\n        <Filter\n          filter={filter}\n          clearFilter={clearFilter}\n          removeItem={removeItem}\n        />\n      )}\n      <Jobs jobs={jobs} addItem={addItem} />\n       <div class=\"attribution\">\n         Challenge by <a href=\"https://www.frontendmentor.io/challenges/job-listings-with-filtering-ivstIPCt\" target=\"_blank\">Frontend Mentor</a>.\n         Coded by <a href=\"https://github.com/michagodfrey\">Michael Godfrey</a>.\n       </div> \n    </main>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}